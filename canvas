import tkinter as tk
from tkinter import simpledialog, messagebox, filedialog
from datetime import datetime
import time, json, os

app_data = {
    "profiles": [],
    "current_user": None,
    "is_dark_mode": False,
    "tasks": [],  
    "reports": [], 
    "notes": ""
}

DATA_FILE = "dashboard_data.json"

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump(app_data, f)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
                app_data.update(data)
            except Exception:
                pass

root = tk.Tk()
root.title("Enhanced Dashboard")
root.geometry("800x500")
canvas = tk.Canvas(root, bg="white", width=800, height=500, highlightthickness=0)
canvas.pack()

header = canvas.create_rectangle(0, 0, 800, 60, fill="#3E64FF")
header_text = canvas.create_text(400, 30, text="Enhanced Dashboard", font=("Helvetica", 20, "bold"), fill="white")
clock_text = canvas.create_text(770, 30, text="", fill="white", font=("Helvetica", 12, "bold"))

sidebar = canvas.create_rectangle(0, 60, 180, 500, fill="#f0f0f0")
sidebar_options = [
    ("Home", lambda: show_home()),
    ("Tasks", lambda: show_tasks()),
    ("Reports", lambda: show_reports()),
    ("Notes", lambda: show_notes()),
    ("Settings", lambda: toggle_dark_mode()),
    ("Save", lambda: save_data()),
    ("Load", lambda: load_data()),
    ("Logout", lambda: logout())
]
sidebar_text_ids = []
for i, (name, cmd) in enumerate(sidebar_options):
    t = canvas.create_text(90, 90 + i*40, text=name, font=("Helvetica", 12))
    canvas.tag_bind(t, '<Button-1>', lambda e, c=cmd: c())
    sidebar_text_ids.append(t)

def update_clock():
    canvas.itemconfig(clock_text, text=time.strftime('%H:%M:%S'))
    root.after(1000, update_clock)

def toggle_dark_mode():
    app_data['is_dark_mode'] = not app_data['is_dark_mode']
    color = "#1e1e1e" if app_data['is_dark_mode'] else "white"
    canvas.config(bg=color)
    root.config(bg=color)

def logout():
    app_data['current_user'] = None
    show_home()

content_box = canvas.create_rectangle(190, 70, 780, 480, fill="#e6f0ff", outline="#ccc")
content_text = canvas.create_text(480, 120, text="Welcome!", font=("Helvetica", 14))

def set_content(msg):
    canvas.itemconfig(content_text, text=msg)

def show_home():
    user = app_data['current_user']
    greeting = "Hello, " + user if user else "Welcome to the Enhanced Dashboard!"
    set_content(greeting)

def show_tasks():
    win = tk.Toplevel(root)
    win.title("Task Manager")
    win.geometry("500x400")

    lb = tk.Listbox(win, width=50)
    lb.pack(pady=5)

    def refresh():
        lb.delete(0, tk.END)
        for i, t in enumerate(app_data['tasks']):
            status = "✔" if t['done'] else "✗"
            p = f"({t['priority']})" if t['priority'] else ""
            lb.insert(tk.END, f"{i+1}. {status} {t['title']} {p}")

    def add():
        title = simpledialog.askstring("Task", "Title:")
        if title:
            prio = simpledialog.askstring("Priority", "Low, Medium, High:")
            app_data['tasks'].append({"title": title, "done": False, "priority": prio, "subtasks": []})
            refresh()

    def mark():
        idx = lb.curselection()
        if idx:
            app_data['tasks'][idx[0]]['done'] = not app_data['tasks'][idx[0]]['done']
            refresh()

    def delete():
        idx = lb.curselection()
        if idx:
            del app_data['tasks'][idx[0]]
            refresh()

    tk.Button(win, text="Add Task", command=add).pack(side=tk.LEFT, padx=5)
    tk.Button(win, text="Toggle Done", command=mark).pack(side=tk.LEFT, padx=5)
    tk.Button(win, text="Delete", command=delete).pack(side=tk.LEFT, padx=5)
    refresh()

def show_reports():
    win = tk.Toplevel(root)
    win.title("Reports")
    win.geometry("500x400")

    lb = tk.Listbox(win, width=60)
    lb.pack(pady=5)
    for r in app_data['reports']:
        lb.insert(tk.END, f"{r['title']} ({r['created']})")

    def add():
        title = simpledialog.askstring("Report", "Enter report title:")
        if title:
            app_data['reports'].append({"title": title, "created": datetime.now().strftime('%Y-%m-%d %H:%M:%S')})
            lb.insert(tk.END, f"{title} ({app_data['reports'][-1]['created']})")

    def export():
        path = filedialog.asksaveasfilename(defaultextension=".txt")
        if path:
            with open(path, 'w') as f:
                for r in app_data['reports']:
                    f.write(f"{r['title']} - {r['created']}\n")
            messagebox.showinfo("Exported", "Reports saved to file.")

    tk.Button(win, text="Add Report", command=add).pack(side=tk.LEFT, padx=5)
    tk.Button(win, text="Export to TXT", command=export).pack(side=tk.LEFT, padx=5)

def show_notes():
    win = tk.Toplevel(root)
    win.title("Notepad")
    win.geometry("500x400")
    txt = tk.Text(win, wrap=tk.WORD)
    txt.pack(expand=True, fill=tk.BOTH)
    txt.insert(tk.END, app_data['notes'])

    def save_note():
        app_data['notes'] = txt.get("1.0", tk.END)

    win.protocol("WM_DELETE_WINDOW", lambda: [save_note(), win.destroy()])

load_data()
show_home()
update_clock()
root.mainloop()
